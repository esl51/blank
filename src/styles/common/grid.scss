/* Grid */

// pixels to % variables
$desk-grid-width: 100% - (($grid-desktop-sideMargin * 2 / $grid-desktop-breakpoint) * 100%);
$tab-grid-width: 100% - (($grid-tablet-sideMargin * 2 / $grid-tablet-breakpoint) * 100%);
$ph-grid-width: 100% - (($grid-phone-sideMargin * 2 / $grid-phone-breakpoint) * 100%);

$desk-gutter: (($grid-desktop-gutter / ($grid-desktop-breakpoint - ($grid-desktop-sideMargin * 2))) * 100%);
$tab-gutter: (($grid-tablet-gutter / ($grid-tablet-breakpoint - ($grid-tablet-sideMargin * 2))) * 100%);
$ph-gutter: (($grid-phone-gutter / ($grid-phone-breakpoint - ($grid-phone-sideMargin * 2))) * 100%);

// Functions and mixins
@function col-width($i, $columns) {
  @return 100% / $columns * $i;
}

@mixin col-props($i, $columns, $gutter) {
  box-sizing: border-box;
  width: col-width($i, $columns);
  padding-left: $gutter/2;
  padding-right: $gutter/2;
}

@mixin columns-loop($name, $columns, $gutter) {
  @for $i from 0 through $columns {
    &--#{$name}-#{$i} {
      @include col-props($i, $columns, $gutter);
    }
    &--#{$name}-shift-#{$i} {
      margin-left: col-width($i, $columns);
    }
  }
}

@mixin grid-base($width) {
  box-sizing: border-box;
  display: flex;
  margin-left: auto;
  margin-right: auto;
  flex-wrap: wrap;
  max-width: $grid-desktop-breakpoint;
  width: $width;
}

// Classes
.grid {
  @include grid-base($desk-grid-width);
  @media screen and (max-width: $grid-tablet-breakpoint) {
    width: $tab-grid-width;
  }
  @media screen and (max-width: $grid-phone-breakpoint) {
    width: $ph-grid-width;
  }
  &--0 {
    @include grid-base(100%);
  }
}

.col {
  @include columns-loop(d, $grid-desktop-columns, $desk-gutter);
  @media screen and (max-width: $grid-tablet-breakpoint) {
    @include columns-loop(t, $grid-tablet-columns, $tab-gutter);
  }
  @media screen and (max-width: $grid-phone-breakpoint) {
    @include columns-loop(m, $grid-phone-columns, $ph-gutter);
  }
}